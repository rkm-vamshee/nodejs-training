JavaScript Functions
========================
Topics:
1. intro
2. implementation
3. Classification of function based on parameters ***
4. Classifition of function based on calling
5. Classifition of function based on writing/creation
6. Classifition of function based on output **
7. hoisting
8. arrow functions
9. inner functions/closures
10. callbacks
11. setTimeout
12. setInterval


========================

Why we need function?
A:

ex:

var a =10;
var b = 15;
console.log(a+b);


function add(){
    var a =10;
    var b = 15;
    console.log(a+b);
}

add();

- reduce code length
- managabillity easy


Definition:
Group of statements doing particular task/work.

Function syntax:- 4 parts

keyword+ functionname+ parenthesis+ function body

function add(){

}


How to Implement Function ?  2 steps 
==================================
1. creation function

2 . calling /execuiting function


function add(){

}

add();


3. Classification of function based on parameters ***
=============================================



1. non paramerterized function
2. paramerterized function

1. non paramerterized function:

function add(){
     var a =10;
    var b = 15;
    console.log(a+b);
}
Note: only in specific cases. limited

2. paramerterized function
// 2 parameters
function addP(m,n){
     var a =m;
    var b = n;
    console.log(a+b);
}

-  paramerterized function with default values
    function addP(m,n=7){
        var a =m;
        var b = n;
        console.log(a+b);
    }



1. non paramerterized function
2. paramerterized function

1. non paramerterized function:

function add(){
     var a =10;
    var b = 15;
    console.log(a+b);
}

add();

Note: only in specific cases. limited

2. paramerterized function
// 2 parameters
function addP(m,n){
     var a =m;
    var b = n;
    console.log(a+b);
}

-  paramerterized function with default values
    function addP(m,n=7){
        var a =m;
        var b = n;
        console.log(a+b);
    }

-----------------------------------------------------------
4. Classifiction of function based on calling
============================================================
1. manually calling
2. selfinvoking

(
    // anonymous function 
)()

(
    function(){
     var a =10;
    var b = 15;
    console.log(a+b);
}

)()


----------------------------------
4. Classifition of function based on writing/creation
----------------------------

1. normal functions - function declarations
2. function expression



Function declaration:
---------------
function add(){
     var a =10;
    var b = 15;
    console.log(a+b);
}

Function Expression:
---------------------
var add2 = function(){
     var a =10;
    var b = 15;
    console.log(a+b);
};

add2();

Arrow Function/Fat arrow Function
var add2 = ()=>{
     var a =10;
    var b = 15;
    console.log(a+b);
};


---------------
6. Classifition of function based on output
--------------------

1. function that not return
2. function that return




function add(){
     var a =10;
    var b = 15;
    console.log(a+b);

}


function add(){
     var a =10;
    var b = 15;
    console.log(a+b);
    return a+b;
    
}

var test = add();


Note*: after return , function will not go to next line

we can sore return into another vairable


arrow functions/ fat arrow function
===========
var add2 = ()=>{
     var a =10;
    var b = 15;
    console.log(a+b);
};

var add3 = ()=>{
    return "Hero";
}


var add3 = ()=>"Hero"


More code => more bugs=> more debugging=> more head ache

hoisting:
===============
Hoisting is JavaScript's default behavior of moving declarations to the top.

Only declarations are hoisted

Difference btn undefined and notdefined
-----------------------------------------

9. inner functions/closures
===========================

function add(){

    function show(){
        console.log("Hai);
    }

    show();

}


10. callbacks
====================

 anonymous functions

 passing functions into another function as parameter

function add(a){
    a();

}
  function show(){
        console.log("Hai);
    }


    add(show);
=============================
    add( function(){
        console.log("Hai);
    });

    =====================
    Notes:
    according to JS, function is first class object


11. setTimeout - mostly used
===================
- only called 1 time
setTimeout(function(){ alert("Hello"); }, 3000);

12. setInterval - 
====================
- call number of times
setInterval(function(){ alert("Hello"); }, 3000);
